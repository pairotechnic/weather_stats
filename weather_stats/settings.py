"""
Django settings for weather_stats project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from dotenv import load_dotenv
import os
import dj_database_url
import urllib.parse

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Set to * during Production setup, will restrict after stable
ALLOWED_HOSTS = [
    '*'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    'weather',
    'rest_framework',
    'django_filters'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'whitenoise.middleware.WhiteNoiseMiddleware'
]

ROOT_URLCONF = 'weather_stats.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'weather_stats.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.parse(os.getenv('POSTGRESQL_DATABASE_URL'))
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # For collectstatic
STATICFILES_DIRS = [BASE_DIR / 'static']  # Additional static dirs

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10
}

CELERY_BROKER_URL = os.getenv("REDIS_URL")
CELERY_BEAT_SCHEDULE = {
    'fetch-weather-every-30-seconds' : {
        'task' : 'weather.tasks.fetch_weather_data',
        'schedule' : 30.0
    }
}

'''
    Average time taken to update data : 

    Barcelona: 458 seconds (~6.38 minutes)
    Hong Kong: 411.6 seconds (~6.51 minutes)
    Singapore: 525 seconds (~6.82 minutes)
    New York: 423.2 seconds (~6.94 minutes)
    London: 419.5 seconds (~7.17 minutes)
    Tokyo: 392.86 seconds (~7.53 minutes)
    Bangkok: 545.4 seconds (~7.61 minutes)
    Paris: 361.17 seconds (~7.73 minutes)
    Istanbul: 651.5 seconds (~7.75 minutes)
    Dubai: 393.5 seconds (~9.18 minutes)

    API Free Plan limitations : 

    60 API calls/minute
    1,000,000 calls/month

    Monthly limit mapped to minute : 
    23 calls/minute ( recommended limit )

    For maximum granularity ( and staying within monthly limits )
    I can make 10 calls every 30 seconds

    To maintain reasonable granularity, but save a lot of resoures
    I can make 10 calls every 5 minutes

'''

REDIS_URL = os.getenv('REDIS_URL')
parsed_redis_url = urllib.parse.urlparse(REDIS_URL)
REDIS_CONFIG = {
    'HOST' : parsed_redis_url.hostname,
    'PORT' : parsed_redis_url.port,
    'DB' : int((parsed_redis_url.path or '/0')[1:]),
    'SSL' : parsed_redis_url.scheme == "rediss"
}

